/*
 * This source file was generated by the Gradle 'init' task
 */
package com.microsoft.ai.prompty;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Map;

import org.yaml.snakeyaml.Yaml;
import com.github.mustachejava.DefaultMustacheFactory;
import com.github.mustachejava.Mustache;
import com.github.mustachejava.MustacheFactory;
import com.microsoft.ai.prompty.models.Prompty;
import com.microsoft.ai.prompty.models.Prompty.ModelConfig;

public class PromptyUtils {
    public static Prompty load(String promptyFilePath) {
        // Read the file content
        String promptyContent = readFile(promptyFilePath);

        // Split the content
        String[] promptyContentArray = promptyContent.split("---");
        promptyContentArray = Arrays.stream(promptyContentArray)
            .map(s -> s.trim())
            .filter(s -> s.length() > 0)
            .toArray(String[]::new);

        Yaml yaml = new Yaml();
        InputStream inputStream = new ByteArrayInputStream(promptyContentArray[0].getBytes(StandardCharsets.UTF_8));
        Map<String, Object> frontMatter = yaml.load(inputStream);

        String promptTemplate = promptyContentArray[1];
        return createPrompty(frontMatter, promptTemplate);
    }

    public static String render(Prompty prompty, Map<String, Object> scopes) {
        MustacheFactory mf = new DefaultMustacheFactory();
        Mustache mustache = mf.compile(new StringReader(prompty.getTemplate()), "prompt");
        Writer writer = new StringWriter();
        mustache.execute(writer, scopes);
        return writer.toString();
    }

    private static String readFile(String filePath) {
        try {
            String content = Files.readString(Paths.get(filePath));
            return content;
        } catch (IOException e) {
            System.err.println("Error reading file (Files.readString): " + e.getMessage());
            return "";
        }
    }

    private static Prompty createPrompty(Map<String, Object> frontMatter, String promptTemplate) {
        Prompty prompty = new Prompty();
        prompty.setTemplate(promptTemplate);

        prompty.setName(AttributeUtils.getString(frontMatter, "name"));
        prompty.setDescription(AttributeUtils.getString(frontMatter, "description"));
        prompty.setVersion(AttributeUtils.getString(frontMatter, "version"));
        prompty.setAuthors(AttributeUtils.getStringList(frontMatter, "authors"));
        prompty.setTags(AttributeUtils.getStringList(frontMatter, "tags"));
        prompty.setInputs(AttributeUtils.getMap(frontMatter, "inputs"));
        prompty.setOutputs(AttributeUtils.getMap(frontMatter, "outputs"));

        Map<String, Object> model = AttributeUtils.getMap(frontMatter, "model");
        prompty.setModel(createModelConfig(model));

        return prompty;
    }

    private static ModelConfig createModelConfig(Map<String, Object> modelConfigMap) {
        if (modelConfigMap == null) {
            return null;
        }

        ModelConfig modelConfig = new ModelConfig();
        modelConfig.setApi(AttributeUtils.getString(modelConfigMap, "api"));
        modelConfig.setConfiguration(AttributeUtils.getMap(modelConfigMap, "configuration"));
        modelConfig.setParameters(AttributeUtils.getMap(modelConfigMap, "parameters"));
        modelConfig.setResponse(AttributeUtils.getString(modelConfigMap, "response"));
        
        return modelConfig;
    }
}
