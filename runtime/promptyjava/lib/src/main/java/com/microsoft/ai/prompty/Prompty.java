/*
 * This source file was generated by the Gradle 'init' task
 */
package com.microsoft.ai.prompty;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Dictionary;
import java.util.HashMap;
import java.util.Map;
import org.yaml.snakeyaml.Yaml;
import com.github.mustachejava.DefaultMustacheFactory;
import com.github.mustachejava.Mustache;
import com.github.mustachejava.MustacheFactory;

public class Prompty {
    private HashMap<String, Object> frontMatter = null;
    private String promptTemplate = null;

    public HashMap<String, Object> getFrontMatterMap() {
        return this.frontMatter;
    }

    public void load(String promptyFilePath) {
        // Read the file content
        String promptyContent = readFile(promptyFilePath);
        System.out.println(promptyContent);

        // Split the content
        String[] promptyContentArray = splitContent(promptyContent);
        promptyContentArray = Arrays.stream(promptyContentArray)
            .map(s -> s.trim())
            .filter(s -> s.length() > 0)
            .toArray(String[]::new);
        System.out.println("* * Total number of parts: " + promptyContentArray.length);
        for (String content : promptyContentArray) {
            System.out.println("-------------------------");
            System.out.println(content);
        }

        // Process front matter
        this.frontMatter = parseFrontMatter(promptyContentArray[0]);

        // Process prompt template
        this.promptTemplate = promptyContentArray[1];
    }

    public String render(HashMap<String, Object> scopes) {
        MustacheFactory mf = new DefaultMustacheFactory();
        Mustache mustache = mf.compile(new StringReader(this.promptTemplate), "prompt");
        // Mustache mustache = mf.compile(new StringReader("{{name}}, {{feature.description}}!"), "example");
        Writer writer = new StringWriter();
        mustache.execute(writer, scopes);
        // // mustache.execute(new PrintWriter(System.out), new Example()).flush();
        return writer.toString();
    }

    private static String readFile(String filePath) {
        try {
            String content = Files.readString(Paths.get(filePath));
            return content;
        } catch (IOException e) {
            System.err.println("Error reading file (Files.readString): " + e.getMessage());
            return "";
        }
    }

    private static String[] splitContent(String content) {
        return content.split("---");
    }

    private static HashMap<String, Object> parseFrontMatter(String content) {
        Yaml yaml = new Yaml();
        InputStream inputStream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));
        HashMap<String, Object> result = yaml.load(inputStream);
        return result;
    }
}
